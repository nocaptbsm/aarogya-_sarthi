from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import logging
import os
from dotenv import load_dotenv

from database import get_user, add_user, delete_user
from location_data import STATES_AND_DISTRICTS
from symptom_checker import handle_symptom_checker
from vaccination_reminders import handle_vaccination_reminders
from outbreak_alerts import get_outbreak_alert
from preventive_healthcare_tips import get_preventive_tips

load_dotenv()
app = Flask(__name__)
logging.basicConfig(level=logging.INFO)


# --- Language & Message Data (remains the same) ---
MESSAGES = {
    'language_select': (
        "Please select your language:\n"
        "Reply with a number:\n"
        "1. English\n"
        "2. рд╣рд┐рдиреНрджреА (Hindi)\n"
        "3. рмУрмбрм╝рм┐рмЖ (Odia)\n"
        "4. рмХрнБрмЗ (Kui)\n"
        "5. с▒ес▒Яс▒▒с▒Ыс▒Яс▒▓с▒д (Santali)"
    ),
    'en': {
        'welcome': "Welcome to Aarogya Sarthi! To get started, what is your full name?",
        'ask_age': "Great. What is your age? Please enter a number (e.g., 25).",
        'invalid_age': "Sorry, that doesn't look like a valid age. Please enter a number between 1 and 120.",
        'ask_gender': "Thanks. What is your gender?\n\nReply with a number:\n1. Male\n2. Female\n3. Other",
        'invalid_gender': "Invalid selection. Please reply with 1, 2, or 3.",
        'ask_state': "Which state do you live in? Please reply with the number for your state.",
        'invalid_state': "Invalid selection. Please choose a number from the list.",
        'ask_district': "And which district? Please reply with the number for your district.",
        'invalid_district': "Invalid selection. Please choose a number from the list for your state.",
        'registered': "You are now registered! Thank you.",
        'welcome_back': "Welcome back to Aarogya Sarthi, {name}! How can I help you today?",
        'main_menu': ("Reply with a number:\n"
                      "1. Symptom Checker\n"
                      "2. Vaccination Reminders\n"
                      "3. Preventive Healthcare Tips\n"
                      "4. Outbreak Alerts (Manual Check)\n"
                      "5. Exit"),
        'symptom_checker_start': "You've selected the Symptom Checker. Please describe your symptoms. To exit at any time, just say 'exit'.",
        'exit_message': "Thank you for using Aarogya Sarthi. Have a healthy day!",
        'outbreak_alert_intro': "тЪая╕П Health Alert for your area:",
        'preventive_tips_intro': "ЁЯМ┐ Health Tip for your area:"
    },
     # ... (other languages remain the same) ...
    'hi': {
        'welcome': "рдЖрд░реЛрдЧреНрдп рд╕рд╛рд░рдереА рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдирд╛рдо рдХреНрдпрд╛ рд╣реИ?",
        'ask_age': "рдмрдврд╝рд┐рдпрд╛ред рдЖрдкрдХреА рдЙрдореНрд░ рдХреНрдпрд╛ рд╣реИ? рдХреГрдкрдпрд╛ рдПрдХ рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВ (рдЬреИрд╕реЗ, 25)ред",
        'invalid_age': "рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдпрд╣ рдПрдХ рд╡реИрдз рдЙрдореНрд░ рдирд╣реАрдВ рд▓рдЧрддреА рд╣реИред рдХреГрдкрдпрд╛ 1 рдФрд░ 120 рдХреЗ рдмреАрдЪ рдПрдХ рд╕рдВрдЦреНрдпрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред",
        'ask_gender': "рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХрд╛ рд▓рд┐рдВрдЧ рдХреНрдпрд╛ рд╣реИ?\n\nрдПрдХ рдирдВрдмрд░ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВ:\n1. рдкреБрд░реБрд╖\n2. рдорд╣рд┐рд▓рд╛\n3. рдЕрдиреНрдп",
        'invalid_gender': "рдЕрдорд╛рдиреНрдп рдЪрдпрдиред рдХреГрдкрдпрд╛ 1, 2, рдпрд╛ 3 рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред",
        'ask_state': "рдЖрдк рдХрд┐рд╕ рд░рд╛рдЬреНрдп рдореЗрдВ рд░рд╣рддреЗ рд╣реИрдВ? рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд░рд╛рдЬреНрдп рдХреЗ рд▓рд┐рдП рдирдВрдмрд░ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред",
        'invalid_state': "рдЕрдорд╛рдиреНрдп рдЪрдпрдиред рдХреГрдкрдпрд╛ рд╕реВрдЪреА рд╕реЗ рдПрдХ рд╕рдВрдЦреНрдпрд╛ рдЪреБрдиреЗрдВред",
        'ask_district': "рдФрд░ рдХреМрди рд╕рд╛ рдЬрд┐рд▓рд╛? рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдЬрд┐рд▓реЗ рдХреЗ рд▓рд┐рдП рдирдВрдмрд░ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВред",
        'invalid_district': "рдЕрдорд╛рдиреНрдп рдЪрдпрдиред рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд░рд╛рдЬреНрдп рдХреЗ рд▓рд┐рдП рд╕реВрдЪреА рд╕реЗ рдПрдХ рд╕рдВрдЦреНрдпрд╛ рдЪреБрдиреЗрдВред",
        'registered': "рдЕрдм рдЖрдк рдкрдВрдЬреАрдХреГрдд рд╣реЛ рдЧрдП рд╣реИрдВ! рдзрдиреНрдпрд╡рд╛рджред",
        'welcome_back': "рдЖрд░реЛрдЧреНрдп рд╕рд╛рд░рдереА рдореЗрдВ рдЖрдкрдХрд╛ рд╡рд╛рдкрд╕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, {name}! рдореИрдВ рдЖрдЬ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
        'main_menu': ("рдПрдХ рдирдВрдмрд░ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВ:\n"
                      "1. рд▓рдХреНрд╖рдг рдкрд░реАрдХреНрд╖рдХ\n"
                      "2. рдЯреАрдХрд╛рдХрд░рдг рдЕрдиреБрд╕реНрдорд╛рд░рдХ\n"
                      "3. рдирд┐рд╡рд╛рд░рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдпреБрдХреНрддрд┐рдпрд╛рдБ\n"
                      "4. рдкреНрд░рдХреЛрдк рдЕрд▓рд░реНрдЯ (рдореИрдиреБрдЕрд▓ рдЬрд╛рдВрдЪ)\n"
                      "5. рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ"),
        'symptom_checker_start': "рдЖрдкрдиреЗ рд▓рдХреНрд╖рдг рдкрд░реАрдХреНрд╖рдХ рдЪреБрдирд╛ рд╣реИред рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВред рдХрд┐рд╕реА рднреА рд╕рдордп рдмрд╛рд╣рд░ рдирд┐рдХрд▓рдиреЗ рдХреЗ рд▓рд┐рдП, рдмрд╕ 'exit' рдХрд╣реЗрдВред",
        'exit_message': "рдЖрд░реЛрдЧреНрдп рд╕рд╛рд░рдереА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рдЖрдкрдХрд╛ рджрд┐рди рд╕реНрд╡рд╕реНрде рд░рд╣реЗ!",
        'outbreak_alert_intro': "тЪая╕П рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЪреЗрддрд╛рд╡рдиреА:",
        'preventive_tips_intro': "ЁЯМ┐ рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реБрдЭрд╛рд╡:"
    },
    'od': {
        'welcome': "рмЖрм░рнЛрмЧрнНрнЯ рм╕рм╛рм░рмерм┐рмХрнБ рм╕рнНрн▒рм╛рмЧрмд! рмЖрм░рморнНрмн рмХрм░рм┐рммрм╛ рмкрм╛рмЗрмБ, рмЖрмкрмгрмЩрнНрмХрм░ рмкрнВрм░рм╛ рмирм╛рмо рмХтАЩрмг?",
        'ask_age': "рммрм╣рнБрмд рмнрм▓ред рмЖрмкрмгрмЩрнНрмХ рммрнЯрм╕ рмХрнЗрмдрнЗ? рмжрнЯрм╛рмХрм░рм┐ рмПрмХ рм╕рмВрмЦрнНрнЯрм╛ рмжрм┐рмЕрмирнНрмдрнБ (рмпрнЗрмкрм░рм┐рмХрм┐, 25)ред",
        'invalid_age': "рмХрнНрм╖рморм╛ рмХрм░рмирнНрмдрнБ, рмПрм╣рм╛ рмПрмХ рммрнИрмз рммрнЯрм╕ рмирнБрм╣рнЗрмБред рмжрнЯрм╛рмХрм░рм┐ 1 рм░рнБ 120 рмормзрнНрнЯрм░рнЗ рмПрмХ рм╕рмВрмЦрнНрнЯрм╛ рмжрм┐рмЕрмирнНрмдрнБред",
        'ask_gender': "рмзрмирнНрнЯрммрм╛рмжред рмЖрмкрмгрмЩрнНрмХ рм▓рм┐рмЩрнНрмЧ рмХтАЩрмг?\n\nрмПрмХ рмирморнНрммрм░ рм╕рм╣рм┐рмд рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБ:\n1. рмкрнБрм░рнБрм╖\n2. рморм╣рм┐рм│рм╛\n3. рмЕрмирнНрнЯ",
        'invalid_gender': "рмЕрммрнИрмз рмЪрнЯрмиред рмжрнЯрм╛рмХрм░рм┐ 1, 2, рмХрм┐рморнНрммрм╛ 3 рм╕рм╣рм┐рмд рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        'ask_state': "рмЖрмкрмг рмХрнЗрмЙрмБ рм░рм╛рмЬрнНрнЯрм░рнЗ рм░рнБрм╣рмирнНрмдрм┐? рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХ рм░рм╛рмЬрнНрнЯ рмкрм╛рмЗрмБ рмирморнНрммрм░ рм╕рм╣рм┐рмд рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        'invalid_state': "рмЕрммрнИрмз рмЪрнЯрмиред рмжрнЯрм╛рмХрм░рм┐ рмдрм╛рм▓рм┐рмХрм╛рм░рнБ рмПрмХ рм╕рмВрмЦрнНрнЯрм╛ рммрм╛рмЫрмирнНрмдрнБред",
        'ask_district': "рмПрммрмВ рмХрнЗрмЙрмБ рмЬрм┐рм▓рнНрм▓рм╛? рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХ рмЬрм┐рм▓рнНрм▓рм╛ рмкрм╛рмЗрмБ рмирморнНрммрм░ рм╕рм╣рм┐рмд рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        'invalid_district': "рмЕрммрнИрмз рмЪрнЯрмиред рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХ рм░рм╛рмЬрнНрнЯ рмкрм╛рмЗрмБ рмдрм╛рм▓рм┐рмХрм╛рм░рнБ рмПрмХ рм╕рмВрмЦрнНрнЯрм╛ рммрм╛рмЫрмирнНрмдрнБред",
        'registered': "рмЖрмкрмг рммрм░рнНрмдрнНрмдрморм╛рми рмкрмЮрнНрмЬрм┐рмХрнГрмд рм╣рнЛрмЗрмЫрмирнНрмдрм┐! рмзрмирнНрнЯрммрм╛рмжред",
        'welcome_back': "рмЖрм░рнЛрмЧрнНрнЯ рм╕рм╛рм░рмерм┐рмХрнБ рмкрнБрмирм░рнНрммрм╛рм░ рм╕рнНрн▒рм╛рмЧрмд, {name}! рмЖрмЬрм┐ рморнБрмБ рмЖрмкрмгрмЩрнНрмХрнБ рмХрм┐рмкрм░рм┐ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рнЗ?",
        'main_menu': ("рмПрмХ рмирморнНрммрм░ рм╕рм╣рм┐рмд рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБ:\n"
                      "1. рм▓рмХрнНрм╖рмг рмпрм╛рмЮрнНрмЪрмХрм╛рм░рнА\n"
                      "2. рмЯрнАрмХрм╛рмХрм░рмг рм╕рнНрморм╛рм░рмХ\n"
                      "3. рмирм┐рм░рм╛рмХрм░рмг рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмкрм░рм╛рморм░рнНрм╢\n"
                      "4. рмкрнНрм░рмХрнЛрмк рм╕рмдрм░рнНрмХрмдрм╛ (рморм╛рмирнБрмЖрм▓ рмпрм╛рмЮрнНрмЪ)\n"
                      "5. рммрм╛рм╣рм╛рм░рм┐рмпрм╛рмЖрмирнНрмдрнБ"),
        'symptom_checker_start': "рмЖрмкрмг рм▓рмХрнНрм╖рмг рмпрм╛рмЮрнНрмЪрмХрм╛рм░рнА рммрм╛рмЫрм┐рмЫрмирнНрмдрм┐ред рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрмЩрнНрмХрм░ рм▓рмХрнНрм╖рмг рммрм░рнНрмгрнНрмгрмирм╛ рмХрм░рмирнНрмдрнБред рмпрнЗрмХрнМрмгрм╕рм┐ рм╕рморнЯрм░рнЗ рммрм╛рм╣рм╛рм░рм┐рммрм╛рмХрнБ, рмХрнЗрммрм│ 'exit' рмХрнБрм╣рмирнНрмдрнБред",
        'exit_message': "рмЖрм░рнЛрмЧрнНрнЯ рм╕рм╛рм░рмерм┐ рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рм┐рмерм┐рммрм╛рм░рнБ рмзрмирнНрнЯрммрм╛рмжред рмЖрмкрмгрмЩрнНрмХ рмжрм┐рми рм╕рнБрм╕рнНрме рм░рм╣рнБ!",
        'outbreak_alert_intro': "тЪая╕П рмЖрмкрмгрмЩрнНрмХ рмЕрмЮрнНрмЪрм│ рмкрм╛рмЗрмБ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рм╕рмдрм░рнНрмХрмдрм╛:",
        'preventive_tips_intro': "ЁЯМ┐ рмЖрмкрмгрмЩрнНрмХ рмЕрмЮрнНрмЪрм│ рмкрм╛рмЗрмБ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмкрм░рм╛рморм░рнНрм╢:"
    },
    'kui': {
        'welcome': "рмЖрм░рнЛрмЧрнНрнЯ рм╕рм╛рм░рмерм┐рмХрнЗ рм╕рнНрн▒рм╛рмЧрмдрнН! рмЖрм░рморнНрмн рмХрм░рммрм╛рмХрнЗ, рмЖрмкрмгрм╛рм░рнН рмирм╛рморнН рмХрм╛рмгрм╛?",
        'ask_age': "рмнрм▓рнНред рмЖрмкрмгрм╛рм░рнН рммрнЯрм╕ рмХрнЗрмдрнЗ? рмжрнЯрм╛рмХрм░рм┐ рмЧрнБрмЯрнЗ рм╕рмВрмЦрнНрнЯрм╛ рмжрм┐рмЕрмирнНрмдрнБ (рмпрнЗрмирнНрмдрм╛, 25)ред",
        'invalid_age': "рморм╛рмлрнН рмХрм░рммрнЗ, рмЗрмЯрм╛ рмЧрнБрмЯрнЗ рмарм┐рмХрнН рммрнЯрм╕ рмирнБрм╣рнЗрмБред рмжрнЯрм╛рмХрм░рм┐ 1 рм░рнБ 120 рмнрм┐рмдрм░рнЗ рмЧрнБрмЯрнЗ рм╕рмВрмЦрнНрнЯрм╛ рмжрм┐рмЕрмирнНрмдрнБред",
        'ask_gender': "рмзрмирнНрнЯрммрм╛рмжред рмЖрмкрмгрм╛рм░рнН рм▓рм┐рмЩрнНрмЧ рмХрм╛рмгрм╛?\n\nрмЧрнБрмЯрнЗ рмирморнНрммрм░ рм╕рм╛рмЩрнНрмЧрнЗ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБ:\n1. рмкрнБрм░рнБрм╖рнН\n2. рморм╣рм┐рм│рм╛\n3. рмЕрмирнНрнЯ",
        'invalid_gender': "рмнрнБрм▓рнН рмЪрнЯрмирнНред рмжрнЯрм╛рмХрм░рм┐ 1, 2, рмХрм┐рморнНрммрм╛ 3 рм╕рм╛рмЩрнНрмЧрнЗ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        'ask_state': "рмЖрмкрмгрнН рмХрнЗрмирнН рм░рм╛рмЬрнНрнЯрм░рнЗ рм░рм╣рнБрмЫрмирнН? рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрм╛рм░рнН рм░рм╛рмЬрнНрнЯрм░рнН рм▓рм╛рмЧрм┐ рмирморнНрммрм░ рм╕рм╛рмЩрнНрмЧрнЗ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        'invalid_state': "рмнрнБрм▓рнН рмЪрнЯрмирнНред рмжрнЯрм╛рмХрм░рм┐ рмдрм╛рм▓рм┐рмХрм╛рм░рнБ рмЧрнБрмЯрнЗ рм╕рмВрмЦрнНрнЯрм╛ рммрм╛рмЫрмирнНрмдрнБред",
        'ask_district': "рмЖрм░рнН рмХрнЗрмирнН рмЬрм┐рм▓рнНрм▓рм╛? рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрм╛рм░рнН рмЬрм┐рм▓рнНрм▓рм╛ рм▓рм╛рмЧрм┐ рмирморнНрммрм░ рм╕рм╛рмЩрнНрмЧрнЗ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБред",
        'invalid_district': "рмнрнБрм▓рнН рмЪрнЯрмирнНред рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрм╛рм░рнН рм░рм╛рмЬрнНрнЯ рм▓рм╛рмЧрм┐ рмдрм╛рм▓рм┐рмХрм╛рм░рнБ рмЧрнБрмЯрнЗ рм╕рмВрмЦрнНрнЯрм╛ рммрм╛рмЫрмирнНрмдрнБред",
        'registered': "рмЖрмкрмгрнН рмПрммрнЗ рмкрмЮрнНрмЬрм┐рмХрнГрмд рм╣рнЗрмЗрмЧрм▓рнЗ! рмзрмирнНрнЯрммрм╛рмжред",
        'welcome_back': "рмЖрм░рнЛрмЧрнНрнЯ рм╕рм╛рм░рмерм┐рмХрнЗ рмлрнЗрм░рнН рм╕рнНрн▒рм╛рмЧрмдрнН, {name}! рмЖрмЬрм┐ рморнБрмЗрмБ рмЖрмкрмгрм╛рм░рнН рмХрнЗрмирнНрмдрм╛ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рнНрморм┐?",
        'main_menu': ("рмЧрнБрмЯрнЗ рмирморнНрммрм░ рм╕рм╛рмЩрнНрмЧрнЗ рмЙрмдрнНрмдрм░ рмжрм┐рмЕрмирнНрмдрнБ:\n"
                      "1. рм▓рмХрнНрм╖рмг рмпрм╛рмЮрнНрмЪрнН\n"
                      "2. рмЯрнАрмХрм╛ рм╕рнНрморм╛рм░рмХ\n"
                      "3. рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмкрм░рм╛рморм░рнНрм╢\n"
                      "4. рмкрнНрм░рмХрнЛрмк рм╕рмдрм░рнНрмХрмдрм╛\n"
                      "5. рммрм╛рм╣рм╛рм░рнН"),
        'symptom_checker_start': "рмЖрмкрмгрнН рм▓рмХрнНрм╖рмг рмпрм╛рмЮрнНрмЪрнН рммрм╛рмЫрм┐рмЫрмирнНред рмжрнЯрм╛рмХрм░рм┐ рмЖрмкрмгрм╛рм░рнН рм▓рмХрнНрм╖рмг рммрм┐рм╖рнЯрм░рнЗ рмХрм╣рмирнНрмдрнБред рмпрнЗрмХрнЗрмирнН рм╕рморнЯрм░рнЗ рммрм╛рм╣рм╛рм░рнНрммрм╛рмХрнЗ, 'exit' рмХрм╣рмирнНрмдрнБред",
        'exit_message': "рмЖрм░рнЛрмЧрнНрнЯ рм╕рм╛рм░рмерм┐ рммрнНрнЯрммрм╣рм╛рм░рнН рмХрм░рнНрмерм┐рммрм╛рм░рнБ рмзрмирнНрнЯрммрм╛рмжред рмЖрмкрмгрм╛рм░рнН рмжрм┐рмирнН рм╕рнБрм╕рнНрме рм░рм╣рнБ!",
        'outbreak_alert_intro': "тЪая╕П рмЖрмкрмгрм╛рм░рнН рмЕрмЮрнНрмЪрм▓рнН рм▓рм╛рмЧрм┐ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рм╕рмдрм░рнНрмХрмдрм╛:",
        'preventive_tips_intro': "ЁЯМ┐ рмЖрмкрмгрм╛рм░рнН рмЕрмЮрнНрмЪрм▓рнН рм▓рм╛рмЧрм┐ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмкрм░рм╛рморм░рнНрм╢:"
    },
    'sa': {
        'welcome': "с▒Яс▒ис▒Ъс▒Ьс▒нс▒Ъ с▒ес▒Яс▒ис▒Ыс▒╖с▒д с▒ис▒о с▒ес▒Яс▒╣с▒Ьс▒йс▒▒ с▒лс▒Яс▒ис▒Яс▒в! с▒ос▒Ыс▒Ъс▒жс▒Ъс▒╡с▒╜ с▒Юс▒Яс▒╣с▒Ьс▒дс▒л, с▒Яс▒вс▒Яс▒Ь с▒пс▒йс▒ис▒Яс▒╣ с▒зс▒йс▒Ыс▒йс▒в с▒лс▒Ъ с▒кс▒ос▒л?",
        'ask_age': "с▒╡с▒ос▒ер╝Н с▒Яс▒вс▒Яс▒Ь с▒╡с▒Ъс▒нс▒Ъс▒е с▒Ыс▒дс▒▒с▒Яс▒╣с▒Ь? с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о с▒вс▒дс▒лс▒┤с▒Яс▒╣с▒Э с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒ос▒вс▒Ъс▒Ь с▒вс▒о (с▒бс▒ос▒Юс▒ас▒Я, 25)с▒╛",
        'invalid_age': "с▒дс▒ас▒Яс▒╣ с▒ас▒Яс▒╣с▒з с▒вс▒о, с▒▒с▒Ъс▒гс▒Я с▒лс▒Ъ ╒│╒л╒╖с▒┤ с▒╡с▒Ъс▒нс▒Ъс▒е с▒╡с▒Яс▒Э с▒ас▒Яс▒▒с▒Яс▒╛ с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о 1 с▒Яс▒и 120 с▒Ыс▒Яс▒Юс▒Я с▒ис▒о с▒вс▒дс▒лс▒┤с▒Яс▒╣с▒Э с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒ос▒вс▒Ъс▒Ь с▒вс▒ос▒╛",
        'ask_gender': "с▒ес▒Яс▒ис▒жс▒Яс▒гр╝Н с▒Яс▒вс▒Яс▒Ь с▒бс▒Яс▒╣с▒Ыс▒д с▒лс▒Ъ с▒кс▒ос▒л?\n\nс▒вс▒дс▒лс▒┤с▒Яс▒╣с▒Э с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒Ыс▒о с▒Ыс▒ос▒Юс▒Я с▒ос▒вс▒Ъс▒Ь с▒вс▒о:\n1. с▒ас▒Ъс▒▓с▒Я\n2. с▒ас▒йс▒▓с▒д\n3. с▒ос▒┤с▒Яс▒Ь",
        'invalid_gender': "с▒╡с▒╖с▒йс▒Ю с▒╡с▒Яс▒кс▒╖с▒▒с▒Яс▒гр╝Н с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о 1, 2, с▒ес▒о 3 с▒Ыс▒о с▒Ыс▒ос▒Юс▒Я с▒ос▒вс▒Ъс▒Ь с▒вс▒ос▒╛",
        'ask_state': "с▒Яс▒в с▒Ъс▒ас▒Я рм░рм╛рмЬрнНрнЯ с▒ис▒ос▒в с▒Ыс▒Яс▒жс▒ос▒▒с▒Я? с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о с▒Яс▒вс▒Яс▒Ь рм░рм╛рмЬрнНрнЯ с▒Юс▒Яс▒╣с▒Ьс▒дс▒л с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒Ыс▒о с▒Ыс▒ос▒Юс▒Я с▒ос▒вс▒Ъс▒Ь с▒вс▒ос▒╛",
        'invalid_state': "с▒╡с▒╖с▒йс▒Ю с▒╡с▒Яс▒кс▒╖с▒▒с▒Яс▒гр╝Н с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о с▒Юс▒дс▒ес▒┤ с▒ас▒╖с▒Ъс▒▒ с▒вс▒дс▒лс▒┤с▒Яс▒╣с▒Э с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒╡с▒Яс▒кс▒╖с▒Яс▒г с▒вс▒ос▒╛",
        'ask_district': "с▒Яс▒и с▒Ъс▒ас▒Я с▒бс▒дс▒Юс▒Юс▒Я? с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о с▒Яс▒вс▒Яс▒Ь с▒бс▒дс▒Юс▒Юс▒Я с▒Юс▒Яс▒╣рмЧс▒дс▒л с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒Ыс▒о с▒Ыс▒ос▒Юрм╛ с▒ос▒вс▒Ъс▒Ь с▒вс▒ос▒╛",
        'invalid_district': "с▒╡с▒╖с▒йс▒Ю с▒╡с▒Яс▒кс▒╖с▒▒с▒Яс▒гр╝Н с▒лс▒Яс▒нрм╛с▒ас▒Яс▒Ыс▒о с▒Яс▒вс▒Яс▒Ь рм░рм╛рмЬрнНрнЯ с▒Юс▒Яс▒╣с▒Ьс▒дс▒л с▒Юс▒дс▒ес▒┤ с▒ас▒╖с▒Ъс▒▒ с▒вс▒дс▒лс▒┤с▒Яс▒╣с▒Э с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒╡с▒Яс▒кс▒╖с▒Яс▒г с▒вс▒ос▒╛",
        'registered': "с▒Яс▒в с▒▒с▒дс▒Ыс▒Ъс▒Ь с▒прмЮрнНрмЬс▒дс▒арнГс▒Ы с▒ос▒▒с▒Яс▒в! с▒ес▒Яс▒ис▒жс▒Яс▒гр╝Н",
        'welcome_back': "с▒Яс▒ис▒Ъс▒Ьс▒нс▒Ъ с▒ес▒Яс▒ис▒Ыс▒╖с▒д с▒ис▒о с▒Яс▒ис▒жс▒Ъс▒╕ с▒ес▒Яс▒╣с▒Ьс▒йс▒▒ с▒лс▒Яс▒ис▒Яс▒в, {name}! с▒Ыс▒ос▒жс▒ос▒з с▒дс▒з с▒Яс▒вс▒Яс▒Ь с▒кс▒ос▒л с▒Ьс▒Ъс▒▓с▒Ъ с▒лс▒Яс▒▓с▒ос▒нс▒Яс▒вс▒Я?",
        'main_menu': ("с▒вс▒дс▒лс▒┤с▒Яс▒╣с▒Э с▒▒с▒Ъс▒вс▒╡с▒Ъс▒и с▒Ыс▒о с▒Ыс▒ос▒Юс▒Я с▒ос▒вс▒Ъс▒Ь с▒вс▒о:\n"
                      "1. ╒б╒н╒┐╒б╒╢╒л╒╖╒╢╒е╓А╒л ╒╜╒┐╒╕╓В╒г╒╕╓В╒┤\n"
                      "2. ╒║╒б╒┐╒╛╒б╒╜╒┐╒╕╓В╒┤╒╢╒е╓А╒л ╒░╒л╒╖╒е╓Б╒╕╓В╒┤╒╢╒е╓А\n"
                      "3. ╒п╒б╒╢╒н╒б╓А╒г╒е╒м╒л╒╣ ╒б╒╝╒╕╒▓╒╗╒б╒║╒б╒░╒б╒п╒б╒╢ ╒н╒╕╓А╒░╒╕╓В╓А╒д╒╢╒е╓А\n"
                      "4. ╒░╒б╒┤╒б╒│╒б╓А╒б╒п╒б╒╡╒л╒╢ ╒б╒░╒б╒ж╒б╒╢╒г╒е╓А\n"
                      "5. ╘╡╒м╓Д"),
        'symptom_checker_start': "с▒Яс▒в ╒б╒н╒┐╒б╒╢╒л╒╖╒╢╒е╓А╒л ╒╜╒┐╒╕╓В╒г╒╕╓В╒┤ с▒ос▒в с▒╡с▒Яс▒кс▒╖с▒Яс▒г с▒ас▒ос▒лс▒Яс▒╛ с▒лс▒Яс▒нс▒Яс▒ас▒Яс▒Ыс▒о с▒Яс▒вс▒Яс▒Ь ╒б╒н╒┐╒б╒╢╒л╒╖╒╢╒е╓А╒и ╒╢╒п╒б╓А╒б╒г╓А╒л╓А╓Й ╒С╒б╒╢╒п╒б╓Б╒б╒о ╒║╒б╒░╒л ╒д╒╕╓В╓А╒╜ ╒г╒б╒м╒╕╓В ╒░╒б╒┤╒б╓А ╒║╒б╓А╒ж╒б╒║╒е╒╜ ╒б╒╜╒б 'exit'╓Й",
        'exit_message': "с▒Яс▒ис▒ЪриЧс▒нс▒Ъ с▒ес▒Яс▒ис▒Ыс▒╖с▒д с▒╡рнНрнЯрммрм╣рм╛рм░ с▒Юс▒Яс▒╣с▒Ьс▒дс▒л с▒ес▒Яс▒ис▒жс▒Яс▒гр╝Н с▒Яс▒вс▒Яс▒Ь с▒лс▒дс▒▒ с▒▒с▒Яс▒пс▒Яс▒н с▒Ыс▒Яс▒жс▒ос▒▒!",
        'outbreak_alert_intro': "тЪая╕П с▒Яс▒вс▒Яс▒Ь с▒ос▒Юс▒Яс▒ас▒Я с▒Юс▒Яс▒╣с▒Ьс▒дс▒л с▒ес▒гс▒Яс▒ес▒Ыс▒╖с▒Ъ  cс║гnh b├бo:",
        'preventive_tips_intro': "ЁЯМ┐ с▒Яс▒вс▒Яс▒Ь с▒ос▒Юс▒ЯрмХрм╛ с▒Юс▒Яс▒╣с▒Ьс▒дс▒л с▒ес▒гс▒Яс▒ес▒Ыс▒╖с▒Ъ ржкрж░рж╛ржорж░рзНрж╢:"
    }
}
user_states = {}

@app.route("/")
def index():
    return "<h1>Aarogya Sarthi Backend is Running!</h1>"

def list_paginated(items, page_num=1, page_size=10):
    start = (page_num - 1) * page_size
    end = start + page_size
    paginated_items = items[start:end]
    response_text = ""
    for i, item in enumerate(paginated_items, start + 1):
        response_text += f"{i}. {item}\n"
    if end < len(items):
        response_text += f"\nReply with 'more' to see the next page."
    return response_text

@app.route("/message", methods=['POST'])
def reply():
    try:
        from_number = request.values.get('From', '')
        incoming_msg = request.values.get('Body', '').strip().lower()
        resp = MessagingResponse()
        
        user = get_user(from_number)
        state_info = user_states.get(from_number, {})
        current_state = state_info.get('state')
        
        lang = state_info.get('lang', 'en')
        if user:
            lang = user[7] if len(user) > 7 and user[7] else 'en'

        if incoming_msg == 'menu':
            if from_number in user_states: del user_states[from_number]
            if user:
                resp.message(MESSAGES[lang]['welcome_back'].format(name=user[2]))
                resp.message(MESSAGES[lang]['main_menu'])
                user_states[from_number] = {'state': 'awaiting_menu_choice', 'lang': lang}
            return str(resp)

        if current_state == 'awaiting_symptoms':
            response_text = handle_symptom_checker(user, state_info, incoming_msg, lang, MESSAGES)
            resp.message(response_text)
            if "exit" in incoming_msg:
                 if from_number in user_states: del user_states[from_number]
                 user_states[from_number] = {'state': 'awaiting_menu_choice', 'lang': lang}
            return str(resp)
        
        elif current_state == 'awaiting_vaccine_choice':
            response_text = handle_vaccination_reminders(user, state_info, incoming_msg, lang, MESSAGES)
            resp.message(response_text)
            if user_states.get(from_number, {}).get('state') != 'awaiting_vaccine_choice':
                 resp.message(MESSAGES[lang]['main_menu'])
                 user_states[from_number] = {'state': 'awaiting_menu_choice', 'lang': lang}
            return str(resp)

        elif user:
            if not current_state:
                alert_message = get_outbreak_alert(user, lang)
                if alert_message:
                    resp.message(alert_message)
                tips_message = get_preventive_tips(user, lang, MESSAGES)
                if tips_message:
                    resp.message(tips_message)
            
            if current_state in [None, 'awaiting_menu_choice']:
                if incoming_msg in ['1','2','3','4','5']:
                    user_states[from_number] = {'lang': lang}
                    if incoming_msg == '1':
                        user_states[from_number]['state'] = 'awaiting_symptoms'
                        resp.message(MESSAGES[lang]['symptom_checker_start'])
                    elif incoming_msg == '2':
                        user_states[from_number]['state'] = 'awaiting_vaccine_choice'
                        response_text = handle_vaccination_reminders(user, user_states[from_number], "start", lang, MESSAGES)
                        resp.message(response_text)
                    elif incoming_msg == '3':
                        tips_message = get_preventive_tips(user, lang, MESSAGES)
                        resp.message(tips_message or "No specific tips available at the moment.")
                        resp.message(MESSAGES[lang]['main_menu'])
                        user_states[from_number]['state'] = 'awaiting_menu_choice'
                    elif incoming_msg == '4':
                        alert_message = get_outbreak_alert(user, lang)
                        resp.message(alert_message or "No active alerts for your country at this time.")
                        resp.message(MESSAGES[lang]['main_menu'])
                        user_states[from_number]['state'] = 'awaiting_menu_choice'
                    elif incoming_msg == '5':
                        if from_number in user_states: del user_states[from_number]
                        resp.message(MESSAGES[lang]['exit_message'])
                else:
                    resp.message(MESSAGES[lang]['welcome_back'].format(name=user[2]))
                    resp.message(MESSAGES[lang]['main_menu'])
                    user_states[from_number] = {'state': 'awaiting_menu_choice', 'lang': lang}
        else:
            if current_state is None and incoming_msg == 'hi':
                resp.message(MESSAGES['language_select'])
                user_states[from_number] = {'state': 'awaiting_language'}
            elif current_state == 'awaiting_language':
                if incoming_msg in ['1','2','3','4','5']:
                    lang_map = {'1':'en', '2':'hi', '3':'od', '4':'kui', '5':'sa'}
                    lang = lang_map[incoming_msg]
                    user_states[from_number] = {'state': 'awaiting_name', 'lang': lang}
                    resp.message(MESSAGES[lang]['welcome'])
                else: resp.message("Invalid selection. " + MESSAGES['language_select'])
            elif current_state == 'awaiting_name':
                state_info['name'] = request.values.get('Body', '').strip()
                resp.message(MESSAGES[lang]['ask_age'])
                state_info['state'] = 'awaiting_age'
            elif current_state == 'awaiting_age':
                try:
                    age = int(incoming_msg)
                    if 1 <= age <= 120:
                        state_info['age'] = age
                        resp.message(MESSAGES[lang]['ask_gender'])
                        state_info['state'] = 'awaiting_gender'
                    else: resp.message(MESSAGES[lang]['invalid_age'])
                except ValueError: resp.message(MESSAGES[lang]['invalid_age'])
            
            # --- MODIFIED REGISTRATION FLOW ---
            elif current_state == 'awaiting_gender':
                gender_map = {'1': 'Male', '2': 'Female', '3': 'Other'}
                if incoming_msg in gender_map:
                    state_info['gender'] = gender_map[incoming_msg]
                    
                    # Set state to Odisha by default
                    selected_state = "Odisha"
                    state_info['selected_state'] = selected_state
                    
                    # Ask for district directly
                    district_list_text = f"{MESSAGES[lang]['ask_district']}\n\n"
                    districts = STATES_AND_DISTRICTS[selected_state]
                    district_list = list_paginated(districts)
                    
                    resp.message(district_list_text + district_list)
                    state_info['state'] = 'awaiting_district'
                    state_info['district_page'] = 1
                else:
                    resp.message(MESSAGES[lang]['invalid_gender'])
            
            # This block is now skipped
            # elif current_state == 'awaiting_state': ...

            elif current_state == 'awaiting_district':
                selected_state = state_info.get('selected_state')
                districts = STATES_AND_DISTRICTS.get(selected_state, [])
                page = state_info.get('district_page', 1)
                if incoming_msg == 'more':
                    page += 1
                    district_list = list_paginated(districts, page_num=page)
                    resp.message(district_list); state_info['district_page'] = page
                else:
                    try:
                        choice = int(incoming_msg)
                        if 1 <= choice <= len(districts):
                            selected_district = districts[choice - 1]
                            add_user(mobile=from_number, name=state_info['name'], age=state_info['age'], gender=state_info['gender'], state=selected_state, district=selected_district, language=lang)
                            newly_registered_user = get_user(from_number)
                            resp.message(MESSAGES[lang]['registered'])
                            resp.message(MESSAGES[lang]['welcome_back'].format(name=newly_registered_user[2]))
                            resp.message(MESSAGES[lang]['main_menu'])
                            user_states[from_number] = {'state': 'awaiting_menu_choice', 'lang': lang}
                        else: resp.message(MESSAGES[lang]['invalid_district'])
                    except (ValueError, TypeError): resp.message(MESSAGES[lang]['invalid_district'])
            else: resp.message("Welcome! Please say 'hi' to start.")
        return str(resp)

    except Exception as e:
        logging.error(f"FATAL ERROR for number {request.values.get('From', '')}: {e}", exc_info=True)
        debug_resp = MessagingResponse()
        error_message = f"An unexpected error occurred. Please show this to the developer: {e}"
        debug_resp.message(error_message)
        return str(debug_resp)

@app.route("/delete_me")
def delete_my_data():
    my_number = os.environ.get("MY_NUMBER")
    if not my_number: return "MY_NUMBER not set in .env"
    try:
        delete_user(my_number)
        if my_number in user_states: del user_states[my_number]
        return f"User data for {my_number} has been deleted."
    except Exception as e: return f"Error deleting user: {e}"

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)